var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ToyPublicKeys","category":"page"},{"location":"#ToyPublicKeys","page":"Home","title":"ToyPublicKeys","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ToyPublicKeys.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ToyPublicKeys]","category":"page"},{"location":"#ToyPublicKeys.RSAPrivateKey","page":"Home","title":"ToyPublicKeys.RSAPrivateKey","text":"RSAPrivateKey is PrivateKey struct for RSA.\nIt holds all information to derive public key and make efficient calculations.\n\n\n\n\n\n","category":"type"},{"location":"#ToyPublicKeys.RSAPublicKey","page":"Home","title":"ToyPublicKeys.RSAPublicKey","text":"RSAPrivateKey is PublicKey struct for RSA.\nIt holds all neccecary information to perform public key computations, but not more.\n\n\n\n\n\n","category":"type"},{"location":"#ToyPublicKeys.RSAStep-Tuple{BigInt, RSAPrivateKey}","page":"Home","title":"ToyPublicKeys.RSAStep","text":"Fast implementation of the RSA exponentiation step, when RSAPrivateKey is provided.\nIt uses Chinese remainer theorem for very fast `exp() mod n` calculations.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.RSAStep-Tuple{BigInt, RSAPublicKey}","page":"Home","title":"ToyPublicKeys.RSAStep","text":"RSA exponentiation step when only public key is available. \nUses repeated squares and other fast modulo exponentiation tricks in its GMP implementation.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.RSAStep-Tuple{String, RSAKey}","page":"Home","title":"ToyPublicKeys.RSAStep","text":"RSA exponentiation step for Strings.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.RSAStep-Union{Tuple{T}, Tuple{AbstractVector{T}, RSAKey}} where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}","page":"Home","title":"ToyPublicKeys.RSAStep","text":"RSA exponentiation step for AbstractVectors (arbitrary buffers).\nSame as the core BigInt version but with Vector to BigInt construction\nand deconstruction.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.decrypt-Tuple{AbstractString, RSAPrivateKey}","page":"Home","title":"ToyPublicKeys.decrypt","text":"RSA decryption function for strings.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.decrypt-Tuple{AbstractVector, RSAPrivateKey}","page":"Home","title":"ToyPublicKeys.decrypt","text":"RSA decryption function for vectors.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.encrypt-Tuple{Union{AbstractString, AbstractVector}, RSAPublicKey}","page":"Home","title":"ToyPublicKeys.encrypt","text":"RSA encryption function with random padding.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.generate_rsa_key_pair-Tuple{Integer}","page":"Home","title":"ToyPublicKeys.generate_rsa_key_pair","text":"RSA key pair constructor.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.is_padded-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}","page":"Home","title":"ToyPublicKeys.is_padded","text":"Checks for magic bytes of PKCS#1 v1.5 padding.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.is_probab_prime_p-Tuple{BigInt, Int64}","page":"Home","title":"ToyPublicKeys.is_probab_prime_p","text":"Binding for GMPlib's gmpz_probab_prime_p function. \nOnly uses probability based tests as it would equall factoring n otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.pad-Union{Tuple{AbstractVector{T}}, Tuple{T}, Tuple{AbstractVector{T}, Any}} where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}","page":"Home","title":"ToyPublicKeys.pad","text":"Core implementation of the PKCS#1 v1.5 padding.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.pad-Union{Tuple{T}, Tuple{T, Any}} where T<:AbstractString","page":"Home","title":"ToyPublicKeys.pad","text":"Wrapper for the core pad function.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.power_crt-NTuple{4, BigInt}","page":"Home","title":"ToyPublicKeys.power_crt","text":"Wrapper around core implementation, only for generating the parameters if they are not provided.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.power_crt-NTuple{7, BigInt}","page":"Home","title":"ToyPublicKeys.power_crt","text":"Core implementation of exp mod using CRT.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.power_crt_components-Tuple{BigInt, BigInt, BigInt}","page":"Home","title":"ToyPublicKeys.power_crt_components","text":"Utility function for calculating the CRT parameters.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.rand_prime_for_rsa","page":"Home","title":"ToyPublicKeys.rand_prime_for_rsa","text":"Helper function for rsa random primes, since they should satisfy special properties.\n\n\n\n\n\n","category":"function"},{"location":"#ToyPublicKeys.random_bigint_from_range-Tuple{Integer}","page":"Home","title":"ToyPublicKeys.random_bigint_from_range","text":"Custom random big int function since core julia does not yet provide 'proper one' (in my opinion).\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.sign-Tuple{AbstractVector, RSAPrivateKey}","page":"Home","title":"ToyPublicKeys.sign","text":"Sign AbstractVector (arbitrary buffer) with RSA key.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.sign-Tuple{String, RSAPrivateKey}","page":"Home","title":"ToyPublicKeys.sign","text":"Sign string with RSA key.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.unpad-Tuple{T} where T<:AbstractString","page":"Home","title":"ToyPublicKeys.unpad","text":"Wrapper for the core unpad function.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.unpad-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}","page":"Home","title":"ToyPublicKeys.unpad","text":"Core implementation for the PKCS#1 v1.5 pad unwrapping.\n\n\n\n\n\n","category":"method"},{"location":"#ToyPublicKeys.verify_signature-Tuple{String, String, RSAPublicKey}","page":"Home","title":"ToyPublicKeys.verify_signature","text":"Verify the sign result.\n\n\n\n\n\n","category":"method"}]
}
